/** 
 * Copyright 2004-2011 DTRules.com, Inc.
 * 
 * See http://DTRules.com for updates and documentation for the DTRules Rules Engine  
 *   
 * Licensed under the Apache License, Version 2.0 (the "License");  
 * you may not use this file except in compliance with the License.  
 * You may obtain a copy of the License at  
 *   
 *      http://www.apache.org/licenses/LICENSE-2.0  
 *   
 * Unless required by applicable law or agreed to in writing, software  
 * distributed under the License is distributed on an "AS IS" BASIS,  
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions and  
 * limitations under the License.  
 **/

package com.dtrules.session;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;

import com.dtrules.infrastructure.RulesException;
import com.dtrules.interpreter.RName;

public interface ICompiler {
	
	/**
	 * Set the session to be used by this instance of the compiler.
	 * @param session
	 */
	public void setSession(IRSession session) throws Exception;

    /**
     * Return the list of unreferenced attributes so far in the use
     * of this compiler.
     * @return
     */
    public ArrayList<String> getUnReferenced();
    /**
     * Return the list of possible referenced attributes so far in the
     * use of this compiler.
     * @return
     */
    public ArrayList<String> getPossibleReferenced();
    /**
     * Last set of tokens parsed prior to the error.
     * @return
     */
    public ArrayList<String> getParsedTokens();
    
    /**
     * Returns the last Prefix (Lisp style) string representation of the AST 
     * tree generated by this compiler instance.
     * @return
     */
    public abstract String getLastPreFixExp();

    /**
     * Compiles a Context Wrapper  Returns the postfix string needed by the Rules Engine.  
     * @param context    The String in "Formal" to be compiled.
     * @return           The postfix string representing the action.
     * @throws Exception Throws an exception if the compile fails for any reason.
     */
    public abstract String compileContext(String context) throws RulesException;
    
    /**
     * Compiles a single Action.  Returns the postfix string needed by the Rules Engine.  
     * @param action     The String in "Formal" to be compiled.
     * @return           The postfix string representing the action.
     * @throws Exception Throws an exception if the compile fails for any reason.
     */
    public abstract String compileInitialAction(String action) throws RulesException;

    /**
     * Compiles a single Condition.  Returns the postfix string needed by the Rules Engine.
     * @param condition   The String in "Formal" to be compiled.
     * @return			  The postfix string representing the condition
     * @throws Exception  Throws an exception if the compile fails for any reason.
     */
    public abstract String compileCondition(String condition) throws RulesException;

    /**
     * Compiles a single Action.  Returns the postfix string needed by the Rules Engine.  
     * @param action 	 The String in "Formal" to be compiled.
     * @return			 The postfix string representing the action.
     * @throws Exception Throws an exception if the compile fails for any reason.
     */
    public abstract String compileAction(String action) throws RulesException;

    /**
     * Copmiles a single Policy Statement.  Returns the postfix string needed by the Rules Engine.
     * @param policyStatement
     * @return
     * @throws Exception
     */
    public String compilePolicyStatement(String policyStatement) throws RulesException;
    
    /**
     * Returns the types HashMap.
     * @return
     */
    public abstract HashMap<RName,IRType> getTypes();
    
    /**
     * Prints all of the types known by the compiler.
     * @throws RulesException
     */
    public void printTypes(PrintStream out) throws RulesException;
    
    /**
     * Notifies the Compiler that the compliation of a new Decision Table is starting.
     */
	public void newDecisionTable();
	
}